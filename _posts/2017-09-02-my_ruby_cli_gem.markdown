---
layout: post
title:  "My Ruby CLI Gem"
date:   2017-09-02 23:22:03 +0000
---


It's been incredibly exciting to finally use my knowledge of Ruby to design and code a project from scratch. I knew right away that I wanted to do something involving books, being the English major and book-lover that I am, but wasn't sure what to do beyond that. After a bunch of searching, I eventually narrowed it down to Penguin Random House's [author event finder](http://www.penguinrandomhouse.com/authors/events) and the [lists of most-downloaded books](https://www.gutenberg.org/browse/scores/top) on Project Gutenberg (a site that provides free public-domain ebooks to download in a variety of formats). I went with Project Gutenberg in the end because there was no way to narrow down the author events to a particular genre or type of books - which is what I would've needed to make it personally useful to me. There was also no way to include author events from other publishers, since none of them have a similar tool.

Once I'd chosen a site to scrape, I figured out exactly what functionality I wanted for my CLI: users would be able to customize their list of top books based on a time period and number of books, would be able to view download options for a book, and finally, would be able to choose one of them to open in the browser. I then tried to map out some of my classes and methods and decide what I wanted each of them to do. I knew I would have a Scraper class and a CLI class, but I was less sure of whether to have a List class, or just use my Books class to create lists through its class methods. I'm still not sure if I made the right choice, since both approaches make a lot of sense to me, but I decided to separate List and Books. In my mind, the lists were important entities in their own right rather than just a way to find and view an individual book.

I got started by re-watching some of the video tutorials to figure out how to properly include nokogiri, pry, and open-uri. I hadn't realized how much I'd taken the project setup for granted, since it's usually done for us in the Learn labs. Once that was out of the way, I started to code a lot of the basic classes and methods I knew I would need, keeping them very simple (sometimes just a placeholder) and expecting to come back later to make them actually work the way they were supposed to. With the basics in place I got started on the CLI. I basically started at the beginning, when a user first enters the CLI, and made everything work one step at a time - going back to fill in the other classes and methods as necessary. This technique seemed to work really well for me, and I was able to complete the basic functionality that I wanted without any major hurdles.

Toward the end of my work, I realized that not every book on every list includes an author at all - and a book without an author would actually break my program! I initially fixed this by assigning the authorless books an author of "N/A" but later decided to go back and change the code so that the author attribute was truly optional.

Because of the way I programmed my CLI, the user is currently unable to go back to a previous screen or exit the program by typing "exit," two features that seem common in other programs I've looked at. I'm not sure how I would go back and implement this without doing some major refactoring, and I'm pretty happy with the structure of my code the way it is, so I decided to leave it for now. In some ways, the simple linear path also seems appropriate for my app's functionality - although I would certainly like to add the additional options eventually!
