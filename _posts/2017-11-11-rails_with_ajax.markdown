---
layout: post
title:      "Rails with Ajax"
date:       2017-11-11 05:48:43 +0000
permalink:  rails_with_ajax
---


The details of ajax were a little difficult to understand at first, but I'm really starting to love it now that I'm getting the hang of it. It feels magical to post a comment and have it just appear! I ended up running into a few hurdles that I had to research to get my app working, so I wanted to use this post to share some of the things I learned.

## Turbolinks

I didn't know any of this before starting my project, but Rails uses something called Turbolinks to speed up page loads by making ajax requests for you. From the [Ruby on Rails guide](http://guides.rubyonrails.org/working_with_javascript_in_rails.html#turbolinks):

> Turbolinks attaches a click handler to all `<a>` on the page. If your browser supports PushState, Turbolinks will make an Ajax request for the page, parse the response, and replace the entire `<body>` of the page with the `<body>` of the response. It will then use PushState to change the URL to the correct one, preserving refresh semantics and giving you pretty URLs.

The problem with this was that some pages loaded through Turbolinks didn't properly fire my `$(document).ready()` code, preventing my event listeners from working before the page was fully reloaded. But after searching around I came across this alternative to the standard `$(document).ready()` that fixes the issue - appariently it's new in Rails 5.
```
$(document).on('turbolinks:load', function(){
  // your code here
}
```
[See here for more info.](https://stackoverflow.com/questions/18770517/rails-4-how-to-use-document-ready-with-turbo-links)

## Event listeners on html added through ajax

Another problem I ran into was getting the code I added through ajax to have the event listeners I wanted. For example, when a user creates a new comment through ajax, I wanted the newly-created comment to have a link to delete it, also with ajax. After trying a few hacky solutions and doing some searching, I got the functionality I wanted with this code:
```
$(".container-element").on('click', '.element-with-listener', function(event){ 
    // event listener code
}
```
Here, I'm first selecting an element that contains the element I want to add the event listener to, and then with the jquery ".on()" method I'm specifying the event, the element to add the listener to, and the function to run. I'm not sure how this works behind the scenes, but it did a great job of fixing my problem!

## CSFR tokens

I still find CSFR tokens a bit confusing, since I've gotten so used to letting Rails handle all the authenticity  details for me, but explicitly providing the token in a jquery `$.ajax()` call seemed to fix a few of the cryptic bugs I ran into. And it turns out that you can get the token from the page metadata generated by Rails.  [Here's a Stack Overflow post that helped me figure it out](https://stackoverflow.com/questions/7203304/warning-cant-verify-csrf-token-authenticity-rails).
